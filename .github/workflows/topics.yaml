name: Update Repository Topics

on:
  workflow_dispatch:
    inputs:
      org_name:
        description: "Name of GitHub organization (leave empty to use default)"
        required: true
        default: "Netcracker"
      repo_name:
        description: "Specific repository to update (leave empty to update all)"
        required: false
        default: ""
permissions:
  contents: read

jobs:
  update-topics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate and Update Topics
        run: |
          JSON_FILE="./config/topics.json"

          if [ ! -f "$JSON_FILE" ]; then
            echo "::error ::topics.json file not found!"
            exit 1
          fi

          # Validate repositoryName fields
          INVALID_ENTRIES=$(jq -r '.[] | select(.repositoryName | contains(",")) | .repositoryName' "$JSON_FILE")

          if [ -n "$INVALID_ENTRIES" ]; then
            echo "::error ::Invalid repositoryName entries detected:"
            echo "$INVALID_ENTRIES"
            exit 1
          else
            echo "All repositoryName fields are valid."
          fi

          # Check if a specific repository is provided
          if [ -n "${{ github.event.inputs.repo_name }}" ]; then
            echo "Updating topics for a single repository: ${{ github.event.inputs.repo_name }}"
            REPO_NAME="${{ github.event.inputs.repo_name }}"
            REPO_ENTRY=$(jq -c '.[] | select(.repositoryName=="'"$REPO_NAME"'")' "$JSON_FILE")

            if [ -z "$REPO_ENTRY" ]; then
              echo "::error ::Repository $REPO_NAME not found in topics.json"
              exit 1
            fi

            TOPICS=$(echo "$REPO_ENTRY" | jq -r '.repositoryTopics[].name' | paste -sd "," -)

            if [ -z "$TOPICS" ]; then
              echo "::warning ::No topics found for $REPO_NAME. Skipping."
              exit 0
            fi

            echo "Updating topics for $REPO_NAME: $TOPICS"
            gh repo edit "$GH_ORG/$REPO_NAME" --add-topic "$TOPICS" || echo "::warning ::Error updating $REPO_NAME. Skipping."

          else
            # Process all repositories
            jq -c '.[]' "$JSON_FILE" | while read -r repo; do
              REPO_NAME=$(echo "$repo" | jq -r '.repositoryName')
              TOPICS=$(echo "$repo" | jq -r '.repositoryTopics[].name' | paste -sd "," -)

              if [ -z "$TOPICS" ]; then
                echo "No topics found for $REPO_NAME. Skipping."
                continue
              fi

              echo "Updating topics for $REPO_NAME: $TOPICS"
              if ! gh repo edit "$GH_ORG/$REPO_NAME" --add-topic "$TOPICS"; then
                echo "::warning ::Error updating $REPO_NAME. Skipping."
              fi
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          GH_ORG: ${{ github.event.inputs.org_name }}
